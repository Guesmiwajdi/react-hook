{"ast":null,"code":"import React from\"react\";import\"./Trailer.css\";import{useParams,Link}from\"react-router-dom\";import{useHistory}from\"react-router-dom/cjs/react-router-dom.min\";import{Button}from\"react-bootstrap\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Trailer(_ref){var newMovie=_ref.newMovie,match=_ref.match;var Id=useParams().id;var targetMovie=newMovie.find(function(el){return el.id===Id;});var nextMovieIndex=newMovie.indexOf(targetMovie)+1;var nextMovie=newMovie[nextMovieIndex];var previousMovieIndex=newMovie.indexOf(targetMovie)-1;var previousMovie=newMovie[previousMovieIndex];var history=useHistory();var handleNextRoute=function handleNextRoute(){if(nextMovieIndex<newMovie.length){history.push(\"/movies/\".concat(nextMovie.id));}else{history.push(\"/movies\");}};var handlePreviousRoute=function handlePreviousRoute(){if(previousMovieIndex>=0){history.push(\"/movies/\".concat(previousMovie.id));}else{history.push(\"/movies\");}};return console.log(useParams()),/*#__PURE__*/_jsxs(\"div\",{className:\"trailer\",children:[/*#__PURE__*/_jsx(Button,{className:\"togglebtn\",onClick:handlePreviousRoute,children:\"Previous movie\"}),/*#__PURE__*/_jsx(\"iframe\",{width:\"560\",height:\"315\",src:targetMovie.TrailerUrl,title:\"YouTube video player\",frameborder:\"0\",allow:\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",allowfullscreen:true}),\" \",/*#__PURE__*/_jsx(Button,{className:\"togglebtn\",variant:\"warning\",onClick:handleNextRoute,children:\"Next movie\"}),/*#__PURE__*/_jsxs(\"h1\",{style:{color:\"red\"},children:[useParams().Title,\" \"]}),/*#__PURE__*/_jsxs(\"p\",{children:[\" \",targetMovie.Description,\" \"]}),/*#__PURE__*/_jsx(Link,{to:\"/\",children:/*#__PURE__*/_jsx(Button,{variant:\"danger\",children:\"Home\"})})]});}export default Trailer;","map":{"version":3,"sources":["C:/Users/WessDjo/Desktop/gomycoden/React-Router-master-main/mon-app/src/Components/Trailer/Trailer.jsx"],"names":["React","useParams","Link","useHistory","Button","Trailer","newMovie","match","Id","id","targetMovie","find","el","nextMovieIndex","indexOf","nextMovie","previousMovieIndex","previousMovie","history","handleNextRoute","length","push","handlePreviousRoute","console","log","TrailerUrl","color","Title","Description"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAO,eAAP,CACA,OAASC,SAAT,CAAoBC,IAApB,KAAgC,kBAAhC,CACA,OAASC,UAAT,KAA2B,2CAA3B,CACA,OAASC,MAAT,KAAuB,iBAAvB,C,wFAEA,QAASC,CAAAA,OAAT,MAAsC,IAAnBC,CAAAA,QAAmB,MAAnBA,QAAmB,CAATC,KAAS,MAATA,KAAS,CAClC,GAAIC,CAAAA,EAAE,CAAGP,SAAS,GAAGQ,EAArB,CACA,GAAIC,CAAAA,WAAW,CAAGJ,QAAQ,CAACK,IAAT,CAAc,SAACC,EAAD,QAAQA,CAAAA,EAAE,CAACH,EAAH,GAAUD,EAAlB,EAAd,CAAlB,CACA,GAAIK,CAAAA,cAAc,CAAGP,QAAQ,CAACQ,OAAT,CAAiBJ,WAAjB,EAAgC,CAArD,CACA,GAAIK,CAAAA,SAAS,CAAGT,QAAQ,CAACO,cAAD,CAAxB,CACA,GAAIG,CAAAA,kBAAkB,CAAGV,QAAQ,CAACQ,OAAT,CAAiBJ,WAAjB,EAAgC,CAAzD,CACA,GAAIO,CAAAA,aAAa,CAAGX,QAAQ,CAACU,kBAAD,CAA5B,CACA,GAAIE,CAAAA,OAAO,CAAGf,UAAU,EAAxB,CAEA,GAAMgB,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CAC1B,GAAIN,cAAc,CAAGP,QAAQ,CAACc,MAA9B,CAAsC,CAClCF,OAAO,CAACG,IAAR,mBAAwBN,SAAS,CAACN,EAAlC,GACH,CAFD,IAEO,CACHS,OAAO,CAACG,IAAR,YACH,CACJ,CAND,CAOA,GAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,EAAM,CAC9B,GAAIN,kBAAkB,EAAI,CAA1B,CAA6B,CACzBE,OAAO,CAACG,IAAR,mBAAwBJ,aAAa,CAACR,EAAtC,GACH,CAFD,IAEO,CACHS,OAAO,CAACG,IAAR,YACH,CACJ,CAND,CAQA,MACIE,CAAAA,OAAO,CAACC,GAAR,CAAYvB,SAAS,EAArB,eAEI,aAAK,SAAS,CAAC,SAAf,wBACI,KAAC,MAAD,EAAQ,SAAS,CAAC,WAAlB,CAA8B,OAAO,CAAEqB,mBAAvC,4BADJ,cAII,eACI,KAAK,CAAC,KADV,CAEI,MAAM,CAAC,KAFX,CAGI,GAAG,CAAEZ,WAAW,CAACe,UAHrB,CAII,KAAK,CAAC,sBAJV,CAKI,WAAW,CAAC,GALhB,CAMI,KAAK,CAAC,0FANV,CAOI,eAAe,KAPnB,EAJJ,CAYe,GAZf,cAaI,KAAC,MAAD,EACI,SAAS,CAAC,WADd,CAEI,OAAO,CAAC,SAFZ,CAGI,OAAO,CAAEN,eAHb,wBAbJ,cAoBI,YAAI,KAAK,CAAE,CAAEO,KAAK,CAAE,KAAT,CAAX,WAA8BzB,SAAS,GAAG0B,KAA1C,OApBJ,cAqBI,yBAAKjB,WAAW,CAACkB,WAAjB,OArBJ,cAsBI,KAAC,IAAD,EAAM,EAAE,CAAC,GAAT,uBACI,KAAC,MAAD,EAAQ,OAAO,CAAC,QAAhB,kBADJ,EAtBJ,GAHR,CA+BH,CAED,cAAevB,CAAAA,OAAf","sourcesContent":["import React from \"react\";\nimport \"./Trailer.css\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\nimport { Button } from \"react-bootstrap\";\n\nfunction Trailer({ newMovie, match }) {\n    let Id = useParams().id;\n    let targetMovie = newMovie.find((el) => el.id === Id);\n    let nextMovieIndex = newMovie.indexOf(targetMovie) + 1;\n    let nextMovie = newMovie[nextMovieIndex];\n    let previousMovieIndex = newMovie.indexOf(targetMovie) - 1;\n    let previousMovie = newMovie[previousMovieIndex];\n    let history = useHistory();\n\n    const handleNextRoute = () => {\n        if (nextMovieIndex < newMovie.length) {\n            history.push(`/movies/${nextMovie.id}`);\n        } else {\n            history.push(`/movies`);\n        }\n    };\n    const handlePreviousRoute = () => {\n        if (previousMovieIndex >= 0) {\n            history.push(`/movies/${previousMovie.id}`);\n        } else {\n            history.push(`/movies`);\n        }\n    };\n\n    return (\n        console.log(useParams()),\n        (\n            <div className=\"trailer\">\n                <Button className=\"togglebtn\" onClick={handlePreviousRoute}>\n                    Previous movie\n                </Button>\n                <iframe\n                    width=\"560\"\n                    height=\"315\"\n                    src={targetMovie.TrailerUrl}\n                    title=\"YouTube video player\"\n                    frameborder=\"0\"\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                    allowfullscreen\n                ></iframe>{\" \"}\n                <Button\n                    className=\"togglebtn\"\n                    variant=\"warning\"\n                    onClick={handleNextRoute}\n                >\n                    Next movie\n                </Button>\n                <h1 style={{ color: \"red\" }}>{useParams().Title} </h1>\n                <p> {targetMovie.Description} </p>\n                <Link to=\"/\">\n                    <Button variant=\"danger\">Home</Button>\n                </Link>\n            </div>\n        )\n    );\n}\n\nexport default Trailer;\n"]},"metadata":{},"sourceType":"module"}